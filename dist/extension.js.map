{"version":3,"file":"extension.js","mappings":"uuBAGA,oBAAyBA,GACvB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,6BAA6BC,UAC5E,MAAMC,EAASJ,EAAOK,OAAOC,iBAC7B,GAAIF,EAAQ,CACV,MAAMG,EAAWH,EAAOG,SAClBC,EAAeC,EAAKC,SAASV,EAAOW,UAAUC,UAAY,GAAIL,EAASM,IAAIC,QAY3EC,GATMN,EAAKO,QAAQT,EAASU,UAAUC,QAAQ,IAAK,IAAIC,cAU3D,8CAA8CX,8CAP3BJ,EAAOgB,UAAUC,QAClC,KACAjB,EAAOG,SAASe,QAAQlB,EAAOgB,aACAb,EAASe,4DAMDd,4CAGrCR,EAAOuB,IAAIC,UAAUC,UAAUV,GACrCf,EAAOK,OAAOqB,uBAAuB,8CACvC,MACE1B,EAAOK,OAAOsB,mBAAmB,0BACnC,IAGEC,EAAwB5B,EAAOC,SAASC,gBAAgB,yBAAyBC,UACnF,IAAIY,EAAe,GAEnB,IAAK,MAAMc,KAAY7B,EAAOK,OAAOyB,UAAUC,IAC7C,IAAK,MAAMC,KAAOH,EAASI,KACzB,GAAID,EAAIE,iBAAiBlC,EAAOmC,aAAc,CAC5C,MAAM5B,QAAiBP,EAAOW,UAAUyB,iBAAiBJ,EAAIE,MAAMrB,KAC7DL,EAAeC,EAAKC,SAASV,EAAOW,UAAUC,UAAY,GAAIL,EAASM,IAAIC,QAC3EuB,EAAa9B,EAASe,UAS5BP,GAJE,8CAA8CP,6CAJpCC,EAAKO,QAAQT,EAASU,UAAUC,QAAQ,IAAK,IAAIC,kBAK1CkB,oDACwB7B,oCAG7C,CAIAO,SAEIf,EAAOuB,IAAIC,UAAUC,UAAUV,GACrCf,EAAOK,OAAOqB,uBAAuB,sDAErC1B,EAAOK,OAAOsB,mBAAmB,2BACnC,IAEF7B,EAAQwC,cAAcC,KAAKxC,EAAY6B,EACzC,EAhEA,kBACA,W,UCDAY,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://CodeCopy/./src/extension.ts","webpack://CodeCopy/external commonjs \"vscode\"","webpack://CodeCopy/external node-commonjs \"path\"","webpack://CodeCopy/webpack/bootstrap","webpack://CodeCopy/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\r\nimport * as path from \"path\";\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  let disposable = vscode.commands.registerCommand(\"extension.copyPathAndCode\", async () => {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (editor) {\r\n      const document = editor.document;\r\n      const relativePath = path.relative(vscode.workspace.rootPath || \"\", document.uri.fsPath);\r\n\r\n      // Get file extension for language guessing\r\n      const ext = path.extname(document.fileName).replace(\".\", \"\").toLowerCase();\r\n\r\n      // Check for selected text\r\n      const selectedText = editor.selection.isEmpty\r\n        ? null\r\n        : editor.document.getText(editor.selection);\r\n      const textToCopy = selectedText || document.getText();\r\n\r\n      // Format combined text for LLM-friendly output with separators\r\n      const combinedText =\r\n        `\\n=============================\\n**File:** ${relativePath}\\n=============================\\n\\n` +\r\n        `\\`\\`\\`${textToCopy}\\n\\`\\`\\`\\n` +\r\n        `=============================\\nEnd of ${relativePath}\\n=============================\\n`;\r\n\r\n      // Copy to clipboard\r\n      await vscode.env.clipboard.writeText(combinedText);\r\n      vscode.window.showInformationMessage(\"LLM-ready code snippet copied to clipboard!\");\r\n    } else {\r\n      vscode.window.showWarningMessage(\"No active editor found.\");\r\n    }\r\n  });\r\n\r\n  let copyAllTabsDisposable = vscode.commands.registerCommand(\"extension.copyAllTabs\", async () => {\r\n    let combinedText = \"\";\r\n\r\n    for (const tabGroup of vscode.window.tabGroups.all) {\r\n      for (const tab of tabGroup.tabs) {\r\n        if (tab.input instanceof vscode.TabInputText) {\r\n          const document = await vscode.workspace.openTextDocument(tab.input.uri);\r\n          const relativePath = path.relative(vscode.workspace.rootPath || \"\", document.uri.fsPath);\r\n          const textToCopy = document.getText();\r\n          const ext = path.extname(document.fileName).replace(\".\", \"\").toLowerCase();\r\n\r\n          // Format combined text for LLM-friendly output with separators\r\n          const fileBlock =\r\n            `\\n=============================\\n**File:** ${relativePath}\\n=============================\\n\\n` +\r\n            `\\`\\`\\`${ext}\\n${textToCopy}\\n\\`\\`\\`\\n` +\r\n            `=============================\\nEnd of ${relativePath}\\n=============================\\n`;\r\n\r\n          combinedText += fileBlock;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (combinedText) {\r\n      // Copy to clipboard\r\n      await vscode.env.clipboard.writeText(combinedText);\r\n      vscode.window.showInformationMessage(\"LLM-ready code from all tabs copied to clipboard!\");\r\n    } else {\r\n      vscode.window.showWarningMessage(\"No open text tabs found.\");\r\n    }\r\n  });\r\n  context.subscriptions.push(disposable, copyAllTabsDisposable);\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","async","editor","window","activeTextEditor","document","relativePath","path","relative","workspace","rootPath","uri","fsPath","combinedText","extname","fileName","replace","toLowerCase","selection","isEmpty","getText","env","clipboard","writeText","showInformationMessage","showWarningMessage","copyAllTabsDisposable","tabGroup","tabGroups","all","tab","tabs","input","TabInputText","openTextDocument","textToCopy","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}